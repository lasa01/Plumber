from typing import Any, Dict, List, Optional, Tuple, Union

class FileSystem:
    def __init__(self, name: str, search_paths: List[Tuple[str, str]]) -> None: ...
    @staticmethod
    def empty() -> "FileSystem": ...
    def name(self) -> str: ...
    def search_paths(self) -> List[Tuple[str, str]]: ...
    def with_search_path(self, search_path: Tuple[str, str]) -> "FileSystem": ...
    def browse(self) -> "FileBrowser": ...
    def extract(self, path: str, is_dir: bool, target_dir: str): ...

def discover_filesystems() -> List[FileSystem]: ...
def filesystem_from_gameinfo(path: str) -> FileSystem: ...
def log_error(error: str) -> None: ...
def log_info(info: str) -> None: ...
def version() -> str: ...

class FileBrowser:
    def read_dir(self, dir: str) -> List["FileBrowserEntry"]: ...

class FileBrowserEntry:
    def name(self) -> str: ...
    def path(self) -> str: ...
    def kind(self) -> str: ...

class SkyEqui:
    def name(self) -> str: ...
    def width(self) -> int: ...
    def height(self) -> int: ...
    def format(self) -> str: ...
    def bytes(self) -> bytes: ...

class Texture:
    def name(self) -> str: ...
    def width(self) -> int: ...
    def height(self) -> int: ...
    def format_ext(self) -> str: ...
    def bytes(self) -> bytes: ...

class Material:
    def name(self) -> str: ...
    def data(self) -> BuiltMaterialData: ...
    def texture_ext(self) -> str: ...

Value = Union[
    bool,
    float,
    List[float],
    str,
    "TextureRef",
]

NodeSocketId = Union[int, str]

class BuiltMaterialData:
    def properties(self) -> Dict[str, Value]: ...
    def nodes(self) -> List["BuiltNode"]: ...
    def texture_color_spaces(self) -> Dict[str, str]: ...

class BuiltNode:
    def blender_id(self) -> str: ...
    def position(self) -> List[float]: ...
    def properties(self) -> Dict[str, Value]: ...
    def socket_values(self) -> Dict[NodeSocketId, Value]: ...
    def socket_links(self) -> Dict[NodeSocketId, "BuiltNodeSocketRef"]: ...

class BuiltNodeSocketRef:
    def node_index(self) -> int: ...
    def socket(self) -> NodeSocketId: ...

class TextureRef:
    def path(self) -> str: ...

class LoadedProp:
    def model(self) -> str: ...
    def class_name(self) -> str: ...
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def color(self) -> List[float]: ...
    def properties(self) -> Dict[str, str]: ...

class QuaternionData:
    def x_points(self) -> List[float]: ...
    def y_points(self) -> List[float]: ...
    def z_points(self) -> List[float]: ...
    def w_points(self) -> List[float]: ...

class VectorData:
    def x_points(self) -> List[float]: ...
    def y_points(self) -> List[float]: ...
    def z_points(self) -> List[float]: ...

class BoneAnimationData:
    def rotation(
        self,
    ) -> List[float] | QuaternionData | None: ...
    def position(self) -> List[float] | VectorData | None: ...

class BoneRestData:
    def rotation(self) -> List[float]: ...
    def position(self) -> List[float]: ...

class LoadedAnimation:
    def name(self) -> str: ...
    def data(self) -> Dict[int, BoneAnimationData]: ...
    def looping(self) -> bool: ...

class LoadedBone:
    def name(self) -> str: ...
    def parent_bone_index(self) -> Optional[int]: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...

class LoadedMesh:
    def name(self) -> str: ...
    def vertices(self) -> List[float]: ...
    def loops_len(self) -> int: ...
    def polygons_len(self) -> int: ...
    def polygon_loop_totals(self) -> List[int]: ...
    def polygon_loop_starts(self) -> List[int]: ...
    def polygon_vertices(self) -> List[int]: ...
    def polygon_material_indices(self) -> List[int]: ...
    def loop_uvs(self) -> List[float]: ...
    def normals(self) -> List[List[float]]: ...
    def weight_groups(self) -> Dict[int, Dict[int, float]]: ...

class Model:
    def name(self) -> str: ...
    def meshes(self) -> List[LoadedMesh]: ...
    def materials(self) -> List[Optional[str]]: ...
    def bones(self) -> List[LoadedBone]: ...
    def animations(self) -> List[LoadedAnimation]: ...
    def rest_positions(self) -> Dict[int, BoneRestData]: ...

class MergedSolids:
    def no_draw(self) -> bool: ...
    def position(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def vertices(self) -> List[float]: ...
    def loops_len(self) -> int: ...
    def polygons_len(self) -> int: ...
    def polygon_loop_totals(self) -> List[int]: ...
    def polygon_loop_starts(self) -> List[int]: ...
    def polygon_vertices(self) -> List[int]: ...
    def polygon_material_indices(self) -> List[int]: ...
    def loop_uvs(self) -> List[float]: ...
    def loop_colors(self) -> List[float]: ...
    def materials(self) -> List[str]: ...

class BuiltSolid:
    def id(self) -> int: ...
    def no_draw(self) -> bool: ...
    def position(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def vertices(self) -> List[float]: ...
    def loops_len(self) -> int: ...
    def polygons_len(self) -> int: ...
    def polygon_loop_totals(self) -> List[int]: ...
    def polygon_loop_starts(self) -> List[int]: ...
    def polygon_vertices(self) -> List[int]: ...
    def polygon_material_indices(self) -> List[int]: ...
    def loop_uvs(self) -> List[float]: ...
    def loop_colors(self) -> List[float]: ...
    def materials(self) -> List[str]: ...

class BuiltBrushEntity:
    def id(self) -> int: ...
    def class_name(self) -> str: ...
    def merged_solids(self) -> Optional[MergedSolids]: ...
    def solids(self) -> List[BuiltSolid]: ...

class BuiltOverlay:
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def vertices(self) -> List[float]: ...
    def loops_len(self) -> int: ...
    def polygons_len(self) -> int: ...
    def polygon_loop_totals(self) -> List[int]: ...
    def polygon_loop_starts(self) -> List[int]: ...
    def polygon_vertices(self) -> List[int]: ...
    def polygon_material_indices(self) -> List[int]: ...
    def loop_uvs(self) -> List[float]: ...
    def material(self) -> str: ...

class Light:
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def color(self) -> List[float]: ...
    def energy(self) -> float: ...
    def properties(self) -> Dict[str, str]: ...

class SpotLight:
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...
    def color(self) -> List[float]: ...
    def energy(self) -> float: ...
    def spot_size(self) -> float: ...
    def spot_blend(self) -> float: ...
    def properties(self) -> Dict[str, str]: ...

class EnvLight:
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...
    def sun_color(self) -> List[float]: ...
    def sun_energy(self) -> float: ...
    def ambient_color(self) -> List[float]: ...
    def ambient_strength(self) -> float: ...
    def angle(self) -> float: ...
    def properties(self) -> Dict[str, str]: ...

class SkyCamera:
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def scale(self) -> List[float]: ...

class UnknownEntity:
    def class_name(self) -> str: ...
    def id(self) -> int: ...
    def position(self) -> List[float]: ...
    def rotation(self) -> List[float]: ...
    def scale(self) -> List[float]: ...
    def properties(self) -> Dict[str, str]: ...

class Importer:
    def __init__(
        self,
        file_system: FileSystem,
        callback_obj: Any,
        threads_suggestion: int,
        **kwargs
    ) -> None: ...
    def import_vmf(self, path: str, from_game: bool, **kwargs) -> None: ...
    def import_mdl(self, path: str, from_game: bool, **kwargs) -> None: ...
    def import_vmt(self, path: str, from_game: bool) -> None: ...
    def import_vtf(self, path: str, from_game: bool) -> None: ...
    def import_mdl_batch(self, paths: List[str], from_game: bool, **kwargs) -> None: ...
    def import_vmt_batch(self, paths: List[str], from_game: bool) -> None: ...
    def import_vtf_batch(self, paths: List[str], from_game: bool) -> None: ...
    def stage_mdl(self, path: str, **kwargs) -> None: ...
    def import_assets(self) -> None: ...
